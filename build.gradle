plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'findbugs'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.0.1'
}

ext {
    releaseDest = new File((File) project.buildDir, "releases")

    generatedJavaSrcName = "generated-src"
    generatedJavaSrc = file("$buildDir/$generatedJavaSrcName")
}

allprojects {
    sourceCompatibility = 1.7
    group = 'net.dean.jraw'
    version = '0.7.0'

    repositories {
        mavenCentral()
    }
}

dependencies {
    compile     'com.squareup.okhttp:okhttp:2.2.0'
    compile     'com.fasterxml.jackson.core:jackson-databind:2.5.0'
    compile     'com.google.guava:guava:18.0'
    compile     'org.slf4j:slf4j-api:1.7.10'
    testCompile 'org.slf4j:slf4j-simple:1.7.10'
    testCompile 'org.testng:testng:6.1.1'
}

// Add the generated source to the main Java source directories
sourceSets.main.java.srcDir ext.generatedJavaSrc

task fatJar(type: Jar, dependsOn: assemble) {
    classifier = 'fat'
    destinationDir = releaseDest
    from(
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) },
        sourceSets.main.output
    )
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    destinationDir = releaseDest
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    destinationDir = releaseDest
    from sourceSets.main.allSource
}

task release(type: Jar, dependsOn: ['fatJar', 'javadocJar', 'sourcesJar']) {
    from sourceSets.main.output
    destinationDir = releaseDest
}

javadoc {
    def overrideVersion = System.properties.'javadoc-version'
    def version = overrideVersion != null ? overrideVersion : project.version
    title = "${project.name} $version API"
}

test {
    useTestNG {
        def travisPR = true
        try {
            // "$TRAVIS_PULL_REQUEST" will be an integer representing the pull request number
            Integer.parseInt("$System.env.TRAVIS_PULL_REQUEST")
        } catch (ignored) {
            travisPR = false
        }

        def testPackage = "net.dean.jraw.test" // Defaults to just non-auth tests

        if (travisPR) {
            println "Build detected as a Travis-CI pull request build."
            println "Only tests that do not require authentication will run."
            println "Expect a major decrease in code coverage."
        } else {
            // Include all tests
            testPackage += ".*"
        }

        // Generate a test suite based on the if this is a Travis-CI pull request
        suiteXmlBuilder().suite(name: 'JRAW-suite') {
            test(name: 'JRAW-test') {
                packages() {
                    'package'(name: testPackage)
                }
            }
        }
    }

    testLogging {
        // Show stderr and stdout (useful for exceptions)
        showStandardStreams = true
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor.className}.${descriptor.name}")
    }
}

idea {
    module {
        // Exclude everything in the build dir except for the generated source folder
        excludeDirs = buildDir.listFiles(new FilenameFilter() {
            @Override
            boolean accept(File file, String s) {
                return !s.equals(generatedJavaSrcName)
            }
        })
        sourceDirs += file(generatedJavaSrc)
    }
}

findbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls depends on XML reports
        html.enabled = true
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

defaultTasks "test"
